%option noyywrap

%top{
	#pragma warning(disable: 4996)
}

%{
	#include <stdlib.h>
	#include <string.h>
	#include "globals.h"
	#include "bfpp_parser.h"

	// Will be generated by bison
	extern int yyparse();
%}

to_int		@I@
to_float	@F@
to_string   @S@
lt			\(
gt			\)
eq			=
start_if    \?
if_blk		_
else_start  #
string		\"[a-zA-Z0-9\.\-_ ]+\"
digits		[0-9]+
floats		[0-9]+(\.[0-9]+)?
mov_left	<
mov_right	>
incr		\+
decr		\-
read		,
write		\.
open_blk	\[
close_blk	\]


%%

{mov_right}		{ return(MOVR); }
{mov_left}		{ return(MOVL); }
{incr}			{ return(INCR); }
{decr}			{ return(DECR); }
{write}			{ return(WRITE); }
{read}			{ return(READ); }
{open_blk}		{ return(OPEN_BLK); }
{close_blk}		{ return(CLOSE_BLK); }
{to_int}		{ return(TO_INT); }
{to_float}		{ return(TO_FLOAT); }
{to_string}		{ return(TO_STRING); }
{start_if}		{ return(IF_START); }
{if_blk}		{ return(IF_BLK); }
{else_start}	{ return(ELSE_START);  }
{lt}			{ return(LT); }
{gt}			{ return(GT); }
{eq}			{ return(EQ); }
{digits}		{ yylval.m_datatype = malloc(sizeof(struct bfpp_datatype)); 
				  yylval.m_datatype->m_type = 'I';
				  yylval.m_datatype->data.m_int = atoi(yytext); return(INTEGER);  }
{floats}		{ yylval.m_datatype = malloc(sizeof(struct bfpp_datatype));
				  yylval.m_datatype->m_type = 'F';
				  yylval.m_datatype->data.m_float = (float) atof(yytext); return(FLOAT); }
{string}		{ yylval.m_datatype = malloc(sizeof(struct bfpp_datatype));
				  yylval.m_datatype->m_type = 'S';

				  int str_len = strlen(yytext) - 1;

				  yylval.m_datatype->data.m_string = malloc(sizeof(char)* (str_len));
				  memset(yylval.m_datatype->data.m_string, '\0', str_len);
				  for (int i = 0; i < str_len - 1; i++)
					  yylval.m_datatype->data.m_string[i] = yytext[i + 1];
				  return(STRING);  }

.

%%